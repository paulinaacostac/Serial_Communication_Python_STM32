
BlinkingLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002390  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002518  08002518  00012518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002550  08002550  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002550  08002550  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002550  08002550  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002550  08002550  00012550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002554  08002554  00012554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000001c  08002574  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08002574  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008770  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001232  00000000  00000000  000287bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000608  00000000  00000000  000299f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005a0  00000000  00000000  00029ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001969b  00000000  00000000  0002a598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008085  00000000  00000000  00043c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000968ce  00000000  00000000  0004bcb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e2586  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001780  00000000  00000000  000e25dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002500 	.word	0x08002500

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08002500 	.word	0x08002500

080001c8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001cc:	f000 f984 	bl	80004d8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001d0:	f000 f814 	bl	80001fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001d4:	f000 f888 	bl	80002e8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80001d8:	f000 f856 	bl	8000288 <MX_USART2_UART_Init>
		//HAL_Delay( 100 );
		/* USER CODE END WHILE */


		/* USER CODE BEGIN 3 */
		HAL_UART_Transmit(&huart2,data,sizeof(data),1000);
 80001dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e0:	220e      	movs	r2, #14
 80001e2:	4904      	ldr	r1, [pc, #16]	; (80001f4 <main+0x2c>)
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <main+0x30>)
 80001e6:	f001 fde5 	bl	8001db4 <HAL_UART_Transmit>
		HAL_Delay(250);
 80001ea:	20fa      	movs	r0, #250	; 0xfa
 80001ec:	f000 f9da 	bl	80005a4 <HAL_Delay>
		HAL_UART_Transmit(&huart2,data,sizeof(data),1000);
 80001f0:	e7f4      	b.n	80001dc <main+0x14>
 80001f2:	bf00      	nop
 80001f4:	20000000 	.word	0x20000000
 80001f8:	20000044 	.word	0x20000044

080001fc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b090      	sub	sp, #64	; 0x40
 8000200:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000202:	f107 0318 	add.w	r3, r7, #24
 8000206:	2228      	movs	r2, #40	; 0x28
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f002 f970 	bl	80024f0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000210:	1d3b      	adds	r3, r7, #4
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]
 800021c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800021e:	2301      	movs	r3, #1
 8000220:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000222:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000226:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000228:	2300      	movs	r3, #0
 800022a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022c:	2301      	movs	r3, #1
 800022e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000230:	2302      	movs	r3, #2
 8000232:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000234:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000238:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800023a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800023e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000240:	f107 0318 	add.w	r3, r7, #24
 8000244:	4618      	mov	r0, r3
 8000246:	f000 fc29 	bl	8000a9c <HAL_RCC_OscConfig>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <SystemClock_Config+0x58>
	{
		Error_Handler();
 8000250:	f000 f86e 	bl	8000330 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000254:	230f      	movs	r3, #15
 8000256:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000258:	2302      	movs	r3, #2
 800025a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000264:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	2102      	movs	r1, #2
 800026e:	4618      	mov	r0, r3
 8000270:	f001 fb1c 	bl	80018ac <HAL_RCC_ClockConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x82>
	{
		Error_Handler();
 800027a:	f000 f859 	bl	8000330 <Error_Handler>
	}
}
 800027e:	bf00      	nop
 8000280:	3740      	adds	r7, #64	; 0x40
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
	...

08000288 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800028c:	4b14      	ldr	r3, [pc, #80]	; (80002e0 <MX_USART2_UART_Init+0x58>)
 800028e:	4a15      	ldr	r2, [pc, #84]	; (80002e4 <MX_USART2_UART_Init+0x5c>)
 8000290:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 38400;
 8000292:	4b13      	ldr	r3, [pc, #76]	; (80002e0 <MX_USART2_UART_Init+0x58>)
 8000294:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000298:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800029a:	4b11      	ldr	r3, [pc, #68]	; (80002e0 <MX_USART2_UART_Init+0x58>)
 800029c:	2200      	movs	r2, #0
 800029e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80002a0:	4b0f      	ldr	r3, [pc, #60]	; (80002e0 <MX_USART2_UART_Init+0x58>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80002a6:	4b0e      	ldr	r3, [pc, #56]	; (80002e0 <MX_USART2_UART_Init+0x58>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80002ac:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <MX_USART2_UART_Init+0x58>)
 80002ae:	220c      	movs	r2, #12
 80002b0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002b2:	4b0b      	ldr	r3, [pc, #44]	; (80002e0 <MX_USART2_UART_Init+0x58>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002b8:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <MX_USART2_UART_Init+0x58>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80002be:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <MX_USART2_UART_Init+0x58>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80002c4:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <MX_USART2_UART_Init+0x58>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80002ca:	4805      	ldr	r0, [pc, #20]	; (80002e0 <MX_USART2_UART_Init+0x58>)
 80002cc:	f001 fd24 	bl	8001d18 <HAL_UART_Init>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 80002d6:	f000 f82b 	bl	8000330 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	20000044 	.word	0x20000044
 80002e4:	40004400 	.word	0x40004400

080002e8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80002ee:	4b0f      	ldr	r3, [pc, #60]	; (800032c <MX_GPIO_Init+0x44>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	4a0e      	ldr	r2, [pc, #56]	; (800032c <MX_GPIO_Init+0x44>)
 80002f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002f8:	6153      	str	r3, [r2, #20]
 80002fa:	4b0c      	ldr	r3, [pc, #48]	; (800032c <MX_GPIO_Init+0x44>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000302:	607b      	str	r3, [r7, #4]
 8000304:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000306:	4b09      	ldr	r3, [pc, #36]	; (800032c <MX_GPIO_Init+0x44>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	4a08      	ldr	r2, [pc, #32]	; (800032c <MX_GPIO_Init+0x44>)
 800030c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000310:	6153      	str	r3, [r2, #20]
 8000312:	4b06      	ldr	r3, [pc, #24]	; (800032c <MX_GPIO_Init+0x44>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800031a:	603b      	str	r3, [r7, #0]
 800031c:	683b      	ldr	r3, [r7, #0]

}
 800031e:	bf00      	nop
 8000320:	370c      	adds	r7, #12
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	40021000 	.word	0x40021000

08000330 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
	...

08000340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000346:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <HAL_MspInit+0x44>)
 8000348:	699b      	ldr	r3, [r3, #24]
 800034a:	4a0e      	ldr	r2, [pc, #56]	; (8000384 <HAL_MspInit+0x44>)
 800034c:	f043 0301 	orr.w	r3, r3, #1
 8000350:	6193      	str	r3, [r2, #24]
 8000352:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <HAL_MspInit+0x44>)
 8000354:	699b      	ldr	r3, [r3, #24]
 8000356:	f003 0301 	and.w	r3, r3, #1
 800035a:	607b      	str	r3, [r7, #4]
 800035c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800035e:	4b09      	ldr	r3, [pc, #36]	; (8000384 <HAL_MspInit+0x44>)
 8000360:	69db      	ldr	r3, [r3, #28]
 8000362:	4a08      	ldr	r2, [pc, #32]	; (8000384 <HAL_MspInit+0x44>)
 8000364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000368:	61d3      	str	r3, [r2, #28]
 800036a:	4b06      	ldr	r3, [pc, #24]	; (8000384 <HAL_MspInit+0x44>)
 800036c:	69db      	ldr	r3, [r3, #28]
 800036e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000372:	603b      	str	r3, [r7, #0]
 8000374:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000376:	bf00      	nop
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	40021000 	.word	0x40021000

08000388 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b08a      	sub	sp, #40	; 0x28
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000390:	f107 0314 	add.w	r3, r7, #20
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
 8000398:	605a      	str	r2, [r3, #4]
 800039a:	609a      	str	r2, [r3, #8]
 800039c:	60da      	str	r2, [r3, #12]
 800039e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a17      	ldr	r2, [pc, #92]	; (8000404 <HAL_UART_MspInit+0x7c>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d128      	bne.n	80003fc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80003aa:	4b17      	ldr	r3, [pc, #92]	; (8000408 <HAL_UART_MspInit+0x80>)
 80003ac:	69db      	ldr	r3, [r3, #28]
 80003ae:	4a16      	ldr	r2, [pc, #88]	; (8000408 <HAL_UART_MspInit+0x80>)
 80003b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003b4:	61d3      	str	r3, [r2, #28]
 80003b6:	4b14      	ldr	r3, [pc, #80]	; (8000408 <HAL_UART_MspInit+0x80>)
 80003b8:	69db      	ldr	r3, [r3, #28]
 80003ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003be:	613b      	str	r3, [r7, #16]
 80003c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <HAL_UART_MspInit+0x80>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	4a10      	ldr	r2, [pc, #64]	; (8000408 <HAL_UART_MspInit+0x80>)
 80003c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003cc:	6153      	str	r3, [r2, #20]
 80003ce:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <HAL_UART_MspInit+0x80>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80003da:	230c      	movs	r3, #12
 80003dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003de:	2302      	movs	r3, #2
 80003e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e2:	2300      	movs	r3, #0
 80003e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003e6:	2303      	movs	r3, #3
 80003e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80003ea:	2307      	movs	r3, #7
 80003ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ee:	f107 0314 	add.w	r3, r7, #20
 80003f2:	4619      	mov	r1, r3
 80003f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003f8:	f000 f9de 	bl	80007b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80003fc:	bf00      	nop
 80003fe:	3728      	adds	r7, #40	; 0x28
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	40004400 	.word	0x40004400
 8000408:	40021000 	.word	0x40021000

0800040c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000410:	e7fe      	b.n	8000410 <NMI_Handler+0x4>

08000412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000412:	b480      	push	{r7}
 8000414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000416:	e7fe      	b.n	8000416 <HardFault_Handler+0x4>

08000418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800041c:	e7fe      	b.n	800041c <MemManage_Handler+0x4>

0800041e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800041e:	b480      	push	{r7}
 8000420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000422:	e7fe      	b.n	8000422 <BusFault_Handler+0x4>

08000424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000428:	e7fe      	b.n	8000428 <UsageFault_Handler+0x4>

0800042a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800042a:	b480      	push	{r7}
 800042c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800042e:	bf00      	nop
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr

08000438 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800043c:	bf00      	nop
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr

08000446 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800044a:	bf00      	nop
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr

08000454 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000458:	f000 f884 	bl	8000564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800045c:	bf00      	nop
 800045e:	bd80      	pop	{r7, pc}

08000460 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000464:	4b06      	ldr	r3, [pc, #24]	; (8000480 <SystemInit+0x20>)
 8000466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800046a:	4a05      	ldr	r2, [pc, #20]	; (8000480 <SystemInit+0x20>)
 800046c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000470:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000474:	bf00      	nop
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	e000ed00 	.word	0xe000ed00

08000484 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000484:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004bc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000488:	480d      	ldr	r0, [pc, #52]	; (80004c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800048a:	490e      	ldr	r1, [pc, #56]	; (80004c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800048c:	4a0e      	ldr	r2, [pc, #56]	; (80004c8 <LoopForever+0xe>)
  movs r3, #0
 800048e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000490:	e002      	b.n	8000498 <LoopCopyDataInit>

08000492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000496:	3304      	adds	r3, #4

08000498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800049a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800049c:	d3f9      	bcc.n	8000492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800049e:	4a0b      	ldr	r2, [pc, #44]	; (80004cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80004a0:	4c0b      	ldr	r4, [pc, #44]	; (80004d0 <LoopForever+0x16>)
  movs r3, #0
 80004a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004a4:	e001      	b.n	80004aa <LoopFillZerobss>

080004a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004a8:	3204      	adds	r2, #4

080004aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004ac:	d3fb      	bcc.n	80004a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004ae:	f7ff ffd7 	bl	8000460 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004b2:	f001 fff9 	bl	80024a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004b6:	f7ff fe87 	bl	80001c8 <main>

080004ba <LoopForever>:

LoopForever:
    b LoopForever
 80004ba:	e7fe      	b.n	80004ba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004bc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80004c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004c4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80004c8:	08002558 	.word	0x08002558
  ldr r2, =_sbss
 80004cc:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80004d0:	200000d8 	.word	0x200000d8

080004d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80004d4:	e7fe      	b.n	80004d4 <ADC1_2_IRQHandler>
	...

080004d8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004dc:	4b08      	ldr	r3, [pc, #32]	; (8000500 <HAL_Init+0x28>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a07      	ldr	r2, [pc, #28]	; (8000500 <HAL_Init+0x28>)
 80004e2:	f043 0310 	orr.w	r3, r3, #16
 80004e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004e8:	2003      	movs	r0, #3
 80004ea:	f000 f931 	bl	8000750 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004ee:	2000      	movs	r0, #0
 80004f0:	f000 f808 	bl	8000504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004f4:	f7ff ff24 	bl	8000340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004f8:	2300      	movs	r3, #0
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40022000 	.word	0x40022000

08000504 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800050c:	4b12      	ldr	r3, [pc, #72]	; (8000558 <HAL_InitTick+0x54>)
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <HAL_InitTick+0x58>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	4619      	mov	r1, r3
 8000516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800051a:	fbb3 f3f1 	udiv	r3, r3, r1
 800051e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000522:	4618      	mov	r0, r3
 8000524:	f000 f93b 	bl	800079e <HAL_SYSTICK_Config>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800052e:	2301      	movs	r3, #1
 8000530:	e00e      	b.n	8000550 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2b0f      	cmp	r3, #15
 8000536:	d80a      	bhi.n	800054e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000538:	2200      	movs	r2, #0
 800053a:	6879      	ldr	r1, [r7, #4]
 800053c:	f04f 30ff 	mov.w	r0, #4294967295
 8000540:	f000 f911 	bl	8000766 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000544:	4a06      	ldr	r2, [pc, #24]	; (8000560 <HAL_InitTick+0x5c>)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800054a:	2300      	movs	r3, #0
 800054c:	e000      	b.n	8000550 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800054e:	2301      	movs	r3, #1
}
 8000550:	4618      	mov	r0, r3
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000010 	.word	0x20000010
 800055c:	20000018 	.word	0x20000018
 8000560:	20000014 	.word	0x20000014

08000564 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <HAL_IncTick+0x20>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	461a      	mov	r2, r3
 800056e:	4b06      	ldr	r3, [pc, #24]	; (8000588 <HAL_IncTick+0x24>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4413      	add	r3, r2
 8000574:	4a04      	ldr	r2, [pc, #16]	; (8000588 <HAL_IncTick+0x24>)
 8000576:	6013      	str	r3, [r2, #0]
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	20000018 	.word	0x20000018
 8000588:	200000d4 	.word	0x200000d4

0800058c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000590:	4b03      	ldr	r3, [pc, #12]	; (80005a0 <HAL_GetTick+0x14>)
 8000592:	681b      	ldr	r3, [r3, #0]
}
 8000594:	4618      	mov	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	200000d4 	.word	0x200000d4

080005a4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005ac:	f7ff ffee 	bl	800058c <HAL_GetTick>
 80005b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005bc:	d005      	beq.n	80005ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <HAL_Delay+0x44>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	461a      	mov	r2, r3
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	4413      	add	r3, r2
 80005c8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80005ca:	bf00      	nop
 80005cc:	f7ff ffde 	bl	800058c <HAL_GetTick>
 80005d0:	4602      	mov	r2, r0
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	1ad3      	subs	r3, r2, r3
 80005d6:	68fa      	ldr	r2, [r7, #12]
 80005d8:	429a      	cmp	r2, r3
 80005da:	d8f7      	bhi.n	80005cc <HAL_Delay+0x28>
  {
  }
}
 80005dc:	bf00      	nop
 80005de:	bf00      	nop
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000018 	.word	0x20000018

080005ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f003 0307 	and.w	r3, r3, #7
 80005fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <__NVIC_SetPriorityGrouping+0x44>)
 80005fe:	68db      	ldr	r3, [r3, #12]
 8000600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000602:	68ba      	ldr	r2, [r7, #8]
 8000604:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000608:	4013      	ands	r3, r2
 800060a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000614:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800061c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800061e:	4a04      	ldr	r2, [pc, #16]	; (8000630 <__NVIC_SetPriorityGrouping+0x44>)
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	60d3      	str	r3, [r2, #12]
}
 8000624:	bf00      	nop
 8000626:	3714      	adds	r7, #20
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000638:	4b04      	ldr	r3, [pc, #16]	; (800064c <__NVIC_GetPriorityGrouping+0x18>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	0a1b      	lsrs	r3, r3, #8
 800063e:	f003 0307 	and.w	r3, r3, #7
}
 8000642:	4618      	mov	r0, r3
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	6039      	str	r1, [r7, #0]
 800065a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000660:	2b00      	cmp	r3, #0
 8000662:	db0a      	blt.n	800067a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	b2da      	uxtb	r2, r3
 8000668:	490c      	ldr	r1, [pc, #48]	; (800069c <__NVIC_SetPriority+0x4c>)
 800066a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066e:	0112      	lsls	r2, r2, #4
 8000670:	b2d2      	uxtb	r2, r2
 8000672:	440b      	add	r3, r1
 8000674:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000678:	e00a      	b.n	8000690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	b2da      	uxtb	r2, r3
 800067e:	4908      	ldr	r1, [pc, #32]	; (80006a0 <__NVIC_SetPriority+0x50>)
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	f003 030f 	and.w	r3, r3, #15
 8000686:	3b04      	subs	r3, #4
 8000688:	0112      	lsls	r2, r2, #4
 800068a:	b2d2      	uxtb	r2, r2
 800068c:	440b      	add	r3, r1
 800068e:	761a      	strb	r2, [r3, #24]
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000e100 	.word	0xe000e100
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b089      	sub	sp, #36	; 0x24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	f003 0307 	and.w	r3, r3, #7
 80006b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	f1c3 0307 	rsb	r3, r3, #7
 80006be:	2b04      	cmp	r3, #4
 80006c0:	bf28      	it	cs
 80006c2:	2304      	movcs	r3, #4
 80006c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	3304      	adds	r3, #4
 80006ca:	2b06      	cmp	r3, #6
 80006cc:	d902      	bls.n	80006d4 <NVIC_EncodePriority+0x30>
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	3b03      	subs	r3, #3
 80006d2:	e000      	b.n	80006d6 <NVIC_EncodePriority+0x32>
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d8:	f04f 32ff 	mov.w	r2, #4294967295
 80006dc:	69bb      	ldr	r3, [r7, #24]
 80006de:	fa02 f303 	lsl.w	r3, r2, r3
 80006e2:	43da      	mvns	r2, r3
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	401a      	ands	r2, r3
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ec:	f04f 31ff 	mov.w	r1, #4294967295
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	fa01 f303 	lsl.w	r3, r1, r3
 80006f6:	43d9      	mvns	r1, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006fc:	4313      	orrs	r3, r2
         );
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3724      	adds	r7, #36	; 0x24
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
	...

0800070c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	3b01      	subs	r3, #1
 8000718:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800071c:	d301      	bcc.n	8000722 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800071e:	2301      	movs	r3, #1
 8000720:	e00f      	b.n	8000742 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000722:	4a0a      	ldr	r2, [pc, #40]	; (800074c <SysTick_Config+0x40>)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3b01      	subs	r3, #1
 8000728:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800072a:	210f      	movs	r1, #15
 800072c:	f04f 30ff 	mov.w	r0, #4294967295
 8000730:	f7ff ff8e 	bl	8000650 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <SysTick_Config+0x40>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800073a:	4b04      	ldr	r3, [pc, #16]	; (800074c <SysTick_Config+0x40>)
 800073c:	2207      	movs	r2, #7
 800073e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000740:	2300      	movs	r3, #0
}
 8000742:	4618      	mov	r0, r3
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	e000e010 	.word	0xe000e010

08000750 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f7ff ff47 	bl	80005ec <__NVIC_SetPriorityGrouping>
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b086      	sub	sp, #24
 800076a:	af00      	add	r7, sp, #0
 800076c:	4603      	mov	r3, r0
 800076e:	60b9      	str	r1, [r7, #8]
 8000770:	607a      	str	r2, [r7, #4]
 8000772:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000778:	f7ff ff5c 	bl	8000634 <__NVIC_GetPriorityGrouping>
 800077c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	68b9      	ldr	r1, [r7, #8]
 8000782:	6978      	ldr	r0, [r7, #20]
 8000784:	f7ff ff8e 	bl	80006a4 <NVIC_EncodePriority>
 8000788:	4602      	mov	r2, r0
 800078a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800078e:	4611      	mov	r1, r2
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff ff5d 	bl	8000650 <__NVIC_SetPriority>
}
 8000796:	bf00      	nop
 8000798:	3718      	adds	r7, #24
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b082      	sub	sp, #8
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f7ff ffb0 	bl	800070c <SysTick_Config>
 80007ac:	4603      	mov	r3, r0
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b087      	sub	sp, #28
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007c6:	e14e      	b.n	8000a66 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	2101      	movs	r1, #1
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	fa01 f303 	lsl.w	r3, r1, r3
 80007d4:	4013      	ands	r3, r2
 80007d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	f000 8140 	beq.w	8000a60 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	f003 0303 	and.w	r3, r3, #3
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d005      	beq.n	80007f8 <HAL_GPIO_Init+0x40>
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	f003 0303 	and.w	r3, r3, #3
 80007f4:	2b02      	cmp	r3, #2
 80007f6:	d130      	bne.n	800085a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	2203      	movs	r2, #3
 8000804:	fa02 f303 	lsl.w	r3, r2, r3
 8000808:	43db      	mvns	r3, r3
 800080a:	693a      	ldr	r2, [r7, #16]
 800080c:	4013      	ands	r3, r2
 800080e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	68da      	ldr	r2, [r3, #12]
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	fa02 f303 	lsl.w	r3, r2, r3
 800081c:	693a      	ldr	r2, [r7, #16]
 800081e:	4313      	orrs	r3, r2
 8000820:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	693a      	ldr	r2, [r7, #16]
 8000826:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800082e:	2201      	movs	r2, #1
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	43db      	mvns	r3, r3
 8000838:	693a      	ldr	r2, [r7, #16]
 800083a:	4013      	ands	r3, r2
 800083c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	091b      	lsrs	r3, r3, #4
 8000844:	f003 0201 	and.w	r2, r3, #1
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	fa02 f303 	lsl.w	r3, r2, r3
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	4313      	orrs	r3, r2
 8000852:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	693a      	ldr	r2, [r7, #16]
 8000858:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	f003 0303 	and.w	r3, r3, #3
 8000862:	2b03      	cmp	r3, #3
 8000864:	d017      	beq.n	8000896 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	68db      	ldr	r3, [r3, #12]
 800086a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	2203      	movs	r2, #3
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	43db      	mvns	r3, r3
 8000878:	693a      	ldr	r2, [r7, #16]
 800087a:	4013      	ands	r3, r2
 800087c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	689a      	ldr	r2, [r3, #8]
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	693a      	ldr	r2, [r7, #16]
 800088c:	4313      	orrs	r3, r2
 800088e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	f003 0303 	and.w	r3, r3, #3
 800089e:	2b02      	cmp	r3, #2
 80008a0:	d123      	bne.n	80008ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	08da      	lsrs	r2, r3, #3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	3208      	adds	r2, #8
 80008aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	220f      	movs	r2, #15
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	43db      	mvns	r3, r3
 80008c0:	693a      	ldr	r2, [r7, #16]
 80008c2:	4013      	ands	r3, r2
 80008c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	691a      	ldr	r2, [r3, #16]
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	f003 0307 	and.w	r3, r3, #7
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	693a      	ldr	r2, [r7, #16]
 80008d8:	4313      	orrs	r3, r2
 80008da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	08da      	lsrs	r2, r3, #3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3208      	adds	r2, #8
 80008e4:	6939      	ldr	r1, [r7, #16]
 80008e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	2203      	movs	r2, #3
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	43db      	mvns	r3, r3
 80008fc:	693a      	ldr	r2, [r7, #16]
 80008fe:	4013      	ands	r3, r2
 8000900:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	f003 0203 	and.w	r2, r3, #3
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	4313      	orrs	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000926:	2b00      	cmp	r3, #0
 8000928:	f000 809a 	beq.w	8000a60 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092c:	4b55      	ldr	r3, [pc, #340]	; (8000a84 <HAL_GPIO_Init+0x2cc>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a54      	ldr	r2, [pc, #336]	; (8000a84 <HAL_GPIO_Init+0x2cc>)
 8000932:	f043 0301 	orr.w	r3, r3, #1
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b52      	ldr	r3, [pc, #328]	; (8000a84 <HAL_GPIO_Init+0x2cc>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f003 0301 	and.w	r3, r3, #1
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000944:	4a50      	ldr	r2, [pc, #320]	; (8000a88 <HAL_GPIO_Init+0x2d0>)
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	089b      	lsrs	r3, r3, #2
 800094a:	3302      	adds	r3, #2
 800094c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000950:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	f003 0303 	and.w	r3, r3, #3
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	220f      	movs	r2, #15
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	43db      	mvns	r3, r3
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	4013      	ands	r3, r2
 8000966:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800096e:	d013      	beq.n	8000998 <HAL_GPIO_Init+0x1e0>
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4a46      	ldr	r2, [pc, #280]	; (8000a8c <HAL_GPIO_Init+0x2d4>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d00d      	beq.n	8000994 <HAL_GPIO_Init+0x1dc>
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4a45      	ldr	r2, [pc, #276]	; (8000a90 <HAL_GPIO_Init+0x2d8>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d007      	beq.n	8000990 <HAL_GPIO_Init+0x1d8>
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a44      	ldr	r2, [pc, #272]	; (8000a94 <HAL_GPIO_Init+0x2dc>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d101      	bne.n	800098c <HAL_GPIO_Init+0x1d4>
 8000988:	2303      	movs	r3, #3
 800098a:	e006      	b.n	800099a <HAL_GPIO_Init+0x1e2>
 800098c:	2305      	movs	r3, #5
 800098e:	e004      	b.n	800099a <HAL_GPIO_Init+0x1e2>
 8000990:	2302      	movs	r3, #2
 8000992:	e002      	b.n	800099a <HAL_GPIO_Init+0x1e2>
 8000994:	2301      	movs	r3, #1
 8000996:	e000      	b.n	800099a <HAL_GPIO_Init+0x1e2>
 8000998:	2300      	movs	r3, #0
 800099a:	697a      	ldr	r2, [r7, #20]
 800099c:	f002 0203 	and.w	r2, r2, #3
 80009a0:	0092      	lsls	r2, r2, #2
 80009a2:	4093      	lsls	r3, r2
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	4313      	orrs	r3, r2
 80009a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009aa:	4937      	ldr	r1, [pc, #220]	; (8000a88 <HAL_GPIO_Init+0x2d0>)
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	089b      	lsrs	r3, r3, #2
 80009b0:	3302      	adds	r3, #2
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009b8:	4b37      	ldr	r3, [pc, #220]	; (8000a98 <HAL_GPIO_Init+0x2e0>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	43db      	mvns	r3, r3
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	4013      	ands	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d003      	beq.n	80009dc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	4313      	orrs	r3, r2
 80009da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80009dc:	4a2e      	ldr	r2, [pc, #184]	; (8000a98 <HAL_GPIO_Init+0x2e0>)
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80009e2:	4b2d      	ldr	r3, [pc, #180]	; (8000a98 <HAL_GPIO_Init+0x2e0>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	43db      	mvns	r3, r3
 80009ec:	693a      	ldr	r2, [r7, #16]
 80009ee:	4013      	ands	r3, r2
 80009f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d003      	beq.n	8000a06 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a06:	4a24      	ldr	r2, [pc, #144]	; (8000a98 <HAL_GPIO_Init+0x2e0>)
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a0c:	4b22      	ldr	r3, [pc, #136]	; (8000a98 <HAL_GPIO_Init+0x2e0>)
 8000a0e:	689b      	ldr	r3, [r3, #8]
 8000a10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	43db      	mvns	r3, r3
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d003      	beq.n	8000a30 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a30:	4a19      	ldr	r2, [pc, #100]	; (8000a98 <HAL_GPIO_Init+0x2e0>)
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a36:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <HAL_GPIO_Init+0x2e0>)
 8000a38:	68db      	ldr	r3, [r3, #12]
 8000a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	43db      	mvns	r3, r3
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	4013      	ands	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d003      	beq.n	8000a5a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a5a:	4a0f      	ldr	r2, [pc, #60]	; (8000a98 <HAL_GPIO_Init+0x2e0>)
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	3301      	adds	r3, #1
 8000a64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	f47f aea9 	bne.w	80007c8 <HAL_GPIO_Init+0x10>
  }
}
 8000a76:	bf00      	nop
 8000a78:	bf00      	nop
 8000a7a:	371c      	adds	r7, #28
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	40021000 	.word	0x40021000
 8000a88:	40010000 	.word	0x40010000
 8000a8c:	48000400 	.word	0x48000400
 8000a90:	48000800 	.word	0x48000800
 8000a94:	48000c00 	.word	0x48000c00
 8000a98:	40010400 	.word	0x40010400

08000a9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d102      	bne.n	8000ab6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	f000 bef4 	b.w	800189e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	f000 816a 	beq.w	8000d9a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ac6:	4bb3      	ldr	r3, [pc, #716]	; (8000d94 <HAL_RCC_OscConfig+0x2f8>)
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f003 030c 	and.w	r3, r3, #12
 8000ace:	2b04      	cmp	r3, #4
 8000ad0:	d00c      	beq.n	8000aec <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ad2:	4bb0      	ldr	r3, [pc, #704]	; (8000d94 <HAL_RCC_OscConfig+0x2f8>)
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f003 030c 	and.w	r3, r3, #12
 8000ada:	2b08      	cmp	r3, #8
 8000adc:	d159      	bne.n	8000b92 <HAL_RCC_OscConfig+0xf6>
 8000ade:	4bad      	ldr	r3, [pc, #692]	; (8000d94 <HAL_RCC_OscConfig+0x2f8>)
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000aea:	d152      	bne.n	8000b92 <HAL_RCC_OscConfig+0xf6>
 8000aec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000af0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000af4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000af8:	fa93 f3a3 	rbit	r3, r3
 8000afc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b00:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b04:	fab3 f383 	clz	r3, r3
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	095b      	lsrs	r3, r3, #5
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d102      	bne.n	8000b1e <HAL_RCC_OscConfig+0x82>
 8000b18:	4b9e      	ldr	r3, [pc, #632]	; (8000d94 <HAL_RCC_OscConfig+0x2f8>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	e015      	b.n	8000b4a <HAL_RCC_OscConfig+0xae>
 8000b1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b22:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b26:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000b2a:	fa93 f3a3 	rbit	r3, r3
 8000b2e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000b32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b36:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000b3a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000b3e:	fa93 f3a3 	rbit	r3, r3
 8000b42:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000b46:	4b93      	ldr	r3, [pc, #588]	; (8000d94 <HAL_RCC_OscConfig+0x2f8>)
 8000b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b4e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000b52:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000b56:	fa92 f2a2 	rbit	r2, r2
 8000b5a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000b5e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000b62:	fab2 f282 	clz	r2, r2
 8000b66:	b2d2      	uxtb	r2, r2
 8000b68:	f042 0220 	orr.w	r2, r2, #32
 8000b6c:	b2d2      	uxtb	r2, r2
 8000b6e:	f002 021f 	and.w	r2, r2, #31
 8000b72:	2101      	movs	r1, #1
 8000b74:	fa01 f202 	lsl.w	r2, r1, r2
 8000b78:	4013      	ands	r3, r2
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f000 810c 	beq.w	8000d98 <HAL_RCC_OscConfig+0x2fc>
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f040 8106 	bne.w	8000d98 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	f000 be86 	b.w	800189e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b9c:	d106      	bne.n	8000bac <HAL_RCC_OscConfig+0x110>
 8000b9e:	4b7d      	ldr	r3, [pc, #500]	; (8000d94 <HAL_RCC_OscConfig+0x2f8>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a7c      	ldr	r2, [pc, #496]	; (8000d94 <HAL_RCC_OscConfig+0x2f8>)
 8000ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ba8:	6013      	str	r3, [r2, #0]
 8000baa:	e030      	b.n	8000c0e <HAL_RCC_OscConfig+0x172>
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d10c      	bne.n	8000bd0 <HAL_RCC_OscConfig+0x134>
 8000bb6:	4b77      	ldr	r3, [pc, #476]	; (8000d94 <HAL_RCC_OscConfig+0x2f8>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a76      	ldr	r2, [pc, #472]	; (8000d94 <HAL_RCC_OscConfig+0x2f8>)
 8000bbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bc0:	6013      	str	r3, [r2, #0]
 8000bc2:	4b74      	ldr	r3, [pc, #464]	; (8000d94 <HAL_RCC_OscConfig+0x2f8>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a73      	ldr	r2, [pc, #460]	; (8000d94 <HAL_RCC_OscConfig+0x2f8>)
 8000bc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bcc:	6013      	str	r3, [r2, #0]
 8000bce:	e01e      	b.n	8000c0e <HAL_RCC_OscConfig+0x172>
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bda:	d10c      	bne.n	8000bf6 <HAL_RCC_OscConfig+0x15a>
 8000bdc:	4b6d      	ldr	r3, [pc, #436]	; (8000d94 <HAL_RCC_OscConfig+0x2f8>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a6c      	ldr	r2, [pc, #432]	; (8000d94 <HAL_RCC_OscConfig+0x2f8>)
 8000be2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000be6:	6013      	str	r3, [r2, #0]
 8000be8:	4b6a      	ldr	r3, [pc, #424]	; (8000d94 <HAL_RCC_OscConfig+0x2f8>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a69      	ldr	r2, [pc, #420]	; (8000d94 <HAL_RCC_OscConfig+0x2f8>)
 8000bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bf2:	6013      	str	r3, [r2, #0]
 8000bf4:	e00b      	b.n	8000c0e <HAL_RCC_OscConfig+0x172>
 8000bf6:	4b67      	ldr	r3, [pc, #412]	; (8000d94 <HAL_RCC_OscConfig+0x2f8>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a66      	ldr	r2, [pc, #408]	; (8000d94 <HAL_RCC_OscConfig+0x2f8>)
 8000bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c00:	6013      	str	r3, [r2, #0]
 8000c02:	4b64      	ldr	r3, [pc, #400]	; (8000d94 <HAL_RCC_OscConfig+0x2f8>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a63      	ldr	r2, [pc, #396]	; (8000d94 <HAL_RCC_OscConfig+0x2f8>)
 8000c08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c0c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c0e:	4b61      	ldr	r3, [pc, #388]	; (8000d94 <HAL_RCC_OscConfig+0x2f8>)
 8000c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c12:	f023 020f 	bic.w	r2, r3, #15
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	495d      	ldr	r1, [pc, #372]	; (8000d94 <HAL_RCC_OscConfig+0x2f8>)
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d059      	beq.n	8000ce0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c2c:	f7ff fcae 	bl	800058c <HAL_GetTick>
 8000c30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c34:	e00a      	b.n	8000c4c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c36:	f7ff fca9 	bl	800058c <HAL_GetTick>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	2b64      	cmp	r3, #100	; 0x64
 8000c44:	d902      	bls.n	8000c4c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000c46:	2303      	movs	r3, #3
 8000c48:	f000 be29 	b.w	800189e <HAL_RCC_OscConfig+0xe02>
 8000c4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c50:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c54:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000c58:	fa93 f3a3 	rbit	r3, r3
 8000c5c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000c60:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c64:	fab3 f383 	clz	r3, r3
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	095b      	lsrs	r3, r3, #5
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d102      	bne.n	8000c7e <HAL_RCC_OscConfig+0x1e2>
 8000c78:	4b46      	ldr	r3, [pc, #280]	; (8000d94 <HAL_RCC_OscConfig+0x2f8>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	e015      	b.n	8000caa <HAL_RCC_OscConfig+0x20e>
 8000c7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c82:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c86:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000c8a:	fa93 f3a3 	rbit	r3, r3
 8000c8e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000c92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c96:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000c9a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000c9e:	fa93 f3a3 	rbit	r3, r3
 8000ca2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000ca6:	4b3b      	ldr	r3, [pc, #236]	; (8000d94 <HAL_RCC_OscConfig+0x2f8>)
 8000ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000caa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cae:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000cb2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000cb6:	fa92 f2a2 	rbit	r2, r2
 8000cba:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000cbe:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	b2d2      	uxtb	r2, r2
 8000cc8:	f042 0220 	orr.w	r2, r2, #32
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	f002 021f 	and.w	r2, r2, #31
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000cd8:	4013      	ands	r3, r2
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d0ab      	beq.n	8000c36 <HAL_RCC_OscConfig+0x19a>
 8000cde:	e05c      	b.n	8000d9a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce0:	f7ff fc54 	bl	800058c <HAL_GetTick>
 8000ce4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ce8:	e00a      	b.n	8000d00 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cea:	f7ff fc4f 	bl	800058c <HAL_GetTick>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	2b64      	cmp	r3, #100	; 0x64
 8000cf8:	d902      	bls.n	8000d00 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	f000 bdcf 	b.w	800189e <HAL_RCC_OscConfig+0xe02>
 8000d00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d04:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d08:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000d0c:	fa93 f3a3 	rbit	r3, r3
 8000d10:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000d14:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d18:	fab3 f383 	clz	r3, r3
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	095b      	lsrs	r3, r3, #5
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d102      	bne.n	8000d32 <HAL_RCC_OscConfig+0x296>
 8000d2c:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <HAL_RCC_OscConfig+0x2f8>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	e015      	b.n	8000d5e <HAL_RCC_OscConfig+0x2c2>
 8000d32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d36:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d3a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000d3e:	fa93 f3a3 	rbit	r3, r3
 8000d42:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000d46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d4a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000d4e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000d52:	fa93 f3a3 	rbit	r3, r3
 8000d56:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <HAL_RCC_OscConfig+0x2f8>)
 8000d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d62:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000d66:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000d6a:	fa92 f2a2 	rbit	r2, r2
 8000d6e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000d72:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	b2d2      	uxtb	r2, r2
 8000d7c:	f042 0220 	orr.w	r2, r2, #32
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	f002 021f 	and.w	r2, r2, #31
 8000d86:	2101      	movs	r1, #1
 8000d88:	fa01 f202 	lsl.w	r2, r1, r2
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1ab      	bne.n	8000cea <HAL_RCC_OscConfig+0x24e>
 8000d92:	e002      	b.n	8000d9a <HAL_RCC_OscConfig+0x2fe>
 8000d94:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f003 0302 	and.w	r3, r3, #2
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	f000 816f 	beq.w	8001088 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000daa:	4bd0      	ldr	r3, [pc, #832]	; (80010ec <HAL_RCC_OscConfig+0x650>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f003 030c 	and.w	r3, r3, #12
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d00b      	beq.n	8000dce <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000db6:	4bcd      	ldr	r3, [pc, #820]	; (80010ec <HAL_RCC_OscConfig+0x650>)
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 030c 	and.w	r3, r3, #12
 8000dbe:	2b08      	cmp	r3, #8
 8000dc0:	d16c      	bne.n	8000e9c <HAL_RCC_OscConfig+0x400>
 8000dc2:	4bca      	ldr	r3, [pc, #808]	; (80010ec <HAL_RCC_OscConfig+0x650>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d166      	bne.n	8000e9c <HAL_RCC_OscConfig+0x400>
 8000dce:	2302      	movs	r3, #2
 8000dd0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dd4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000dd8:	fa93 f3a3 	rbit	r3, r3
 8000ddc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000de0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000de4:	fab3 f383 	clz	r3, r3
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	095b      	lsrs	r3, r3, #5
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d102      	bne.n	8000dfe <HAL_RCC_OscConfig+0x362>
 8000df8:	4bbc      	ldr	r3, [pc, #752]	; (80010ec <HAL_RCC_OscConfig+0x650>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	e013      	b.n	8000e26 <HAL_RCC_OscConfig+0x38a>
 8000dfe:	2302      	movs	r3, #2
 8000e00:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e04:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000e08:	fa93 f3a3 	rbit	r3, r3
 8000e0c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000e10:	2302      	movs	r3, #2
 8000e12:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000e16:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000e1a:	fa93 f3a3 	rbit	r3, r3
 8000e1e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000e22:	4bb2      	ldr	r3, [pc, #712]	; (80010ec <HAL_RCC_OscConfig+0x650>)
 8000e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e26:	2202      	movs	r2, #2
 8000e28:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000e2c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000e30:	fa92 f2a2 	rbit	r2, r2
 8000e34:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000e38:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000e3c:	fab2 f282 	clz	r2, r2
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	f042 0220 	orr.w	r2, r2, #32
 8000e46:	b2d2      	uxtb	r2, r2
 8000e48:	f002 021f 	and.w	r2, r2, #31
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e52:	4013      	ands	r3, r2
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d007      	beq.n	8000e68 <HAL_RCC_OscConfig+0x3cc>
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	691b      	ldr	r3, [r3, #16]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d002      	beq.n	8000e68 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	f000 bd1b 	b.w	800189e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e68:	4ba0      	ldr	r3, [pc, #640]	; (80010ec <HAL_RCC_OscConfig+0x650>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	21f8      	movs	r1, #248	; 0xf8
 8000e78:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e7c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000e80:	fa91 f1a1 	rbit	r1, r1
 8000e84:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000e88:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000e8c:	fab1 f181 	clz	r1, r1
 8000e90:	b2c9      	uxtb	r1, r1
 8000e92:	408b      	lsls	r3, r1
 8000e94:	4995      	ldr	r1, [pc, #596]	; (80010ec <HAL_RCC_OscConfig+0x650>)
 8000e96:	4313      	orrs	r3, r2
 8000e98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e9a:	e0f5      	b.n	8001088 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	691b      	ldr	r3, [r3, #16]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f000 8085 	beq.w	8000fb2 <HAL_RCC_OscConfig+0x516>
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eae:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000eb2:	fa93 f3a3 	rbit	r3, r3
 8000eb6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8000eba:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ebe:	fab3 f383 	clz	r3, r3
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000ec8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	461a      	mov	r2, r3
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed4:	f7ff fb5a 	bl	800058c <HAL_GetTick>
 8000ed8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000edc:	e00a      	b.n	8000ef4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ede:	f7ff fb55 	bl	800058c <HAL_GetTick>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d902      	bls.n	8000ef4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	f000 bcd5 	b.w	800189e <HAL_RCC_OscConfig+0xe02>
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000efa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000efe:	fa93 f3a3 	rbit	r3, r3
 8000f02:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8000f06:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f0a:	fab3 f383 	clz	r3, r3
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	095b      	lsrs	r3, r3, #5
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d102      	bne.n	8000f24 <HAL_RCC_OscConfig+0x488>
 8000f1e:	4b73      	ldr	r3, [pc, #460]	; (80010ec <HAL_RCC_OscConfig+0x650>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	e013      	b.n	8000f4c <HAL_RCC_OscConfig+0x4b0>
 8000f24:	2302      	movs	r3, #2
 8000f26:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f2a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000f2e:	fa93 f3a3 	rbit	r3, r3
 8000f32:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000f36:	2302      	movs	r3, #2
 8000f38:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000f3c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000f40:	fa93 f3a3 	rbit	r3, r3
 8000f44:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8000f48:	4b68      	ldr	r3, [pc, #416]	; (80010ec <HAL_RCC_OscConfig+0x650>)
 8000f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8000f52:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000f56:	fa92 f2a2 	rbit	r2, r2
 8000f5a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8000f5e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8000f62:	fab2 f282 	clz	r2, r2
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	f042 0220 	orr.w	r2, r2, #32
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	f002 021f 	and.w	r2, r2, #31
 8000f72:	2101      	movs	r1, #1
 8000f74:	fa01 f202 	lsl.w	r2, r1, r2
 8000f78:	4013      	ands	r3, r2
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d0af      	beq.n	8000ede <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f7e:	4b5b      	ldr	r3, [pc, #364]	; (80010ec <HAL_RCC_OscConfig+0x650>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	695b      	ldr	r3, [r3, #20]
 8000f8c:	21f8      	movs	r1, #248	; 0xf8
 8000f8e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f92:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8000f96:	fa91 f1a1 	rbit	r1, r1
 8000f9a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8000f9e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8000fa2:	fab1 f181 	clz	r1, r1
 8000fa6:	b2c9      	uxtb	r1, r1
 8000fa8:	408b      	lsls	r3, r1
 8000faa:	4950      	ldr	r1, [pc, #320]	; (80010ec <HAL_RCC_OscConfig+0x650>)
 8000fac:	4313      	orrs	r3, r2
 8000fae:	600b      	str	r3, [r1, #0]
 8000fb0:	e06a      	b.n	8001088 <HAL_RCC_OscConfig+0x5ec>
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000fbc:	fa93 f3a3 	rbit	r3, r3
 8000fc0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8000fc4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fc8:	fab3 f383 	clz	r3, r3
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fd2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	461a      	mov	r2, r3
 8000fda:	2300      	movs	r3, #0
 8000fdc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fde:	f7ff fad5 	bl	800058c <HAL_GetTick>
 8000fe2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fe6:	e00a      	b.n	8000ffe <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fe8:	f7ff fad0 	bl	800058c <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d902      	bls.n	8000ffe <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	f000 bc50 	b.w	800189e <HAL_RCC_OscConfig+0xe02>
 8000ffe:	2302      	movs	r3, #2
 8001000:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001004:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001008:	fa93 f3a3 	rbit	r3, r3
 800100c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001010:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001014:	fab3 f383 	clz	r3, r3
 8001018:	b2db      	uxtb	r3, r3
 800101a:	095b      	lsrs	r3, r3, #5
 800101c:	b2db      	uxtb	r3, r3
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2b01      	cmp	r3, #1
 8001026:	d102      	bne.n	800102e <HAL_RCC_OscConfig+0x592>
 8001028:	4b30      	ldr	r3, [pc, #192]	; (80010ec <HAL_RCC_OscConfig+0x650>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	e013      	b.n	8001056 <HAL_RCC_OscConfig+0x5ba>
 800102e:	2302      	movs	r3, #2
 8001030:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001034:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001038:	fa93 f3a3 	rbit	r3, r3
 800103c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001040:	2302      	movs	r3, #2
 8001042:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001046:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800104a:	fa93 f3a3 	rbit	r3, r3
 800104e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001052:	4b26      	ldr	r3, [pc, #152]	; (80010ec <HAL_RCC_OscConfig+0x650>)
 8001054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001056:	2202      	movs	r2, #2
 8001058:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800105c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001060:	fa92 f2a2 	rbit	r2, r2
 8001064:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001068:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800106c:	fab2 f282 	clz	r2, r2
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	f042 0220 	orr.w	r2, r2, #32
 8001076:	b2d2      	uxtb	r2, r2
 8001078:	f002 021f 	and.w	r2, r2, #31
 800107c:	2101      	movs	r1, #1
 800107e:	fa01 f202 	lsl.w	r2, r1, r2
 8001082:	4013      	ands	r3, r2
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1af      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0308 	and.w	r3, r3, #8
 8001092:	2b00      	cmp	r3, #0
 8001094:	f000 80da 	beq.w	800124c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d069      	beq.n	8001176 <HAL_RCC_OscConfig+0x6da>
 80010a2:	2301      	movs	r3, #1
 80010a4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80010ac:	fa93 f3a3 	rbit	r3, r3
 80010b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80010b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010b8:	fab3 f383 	clz	r3, r3
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	461a      	mov	r2, r3
 80010c0:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <HAL_RCC_OscConfig+0x654>)
 80010c2:	4413      	add	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	461a      	mov	r2, r3
 80010c8:	2301      	movs	r3, #1
 80010ca:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010cc:	f7ff fa5e 	bl	800058c <HAL_GetTick>
 80010d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010d4:	e00e      	b.n	80010f4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010d6:	f7ff fa59 	bl	800058c <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d906      	bls.n	80010f4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e3d9      	b.n	800189e <HAL_RCC_OscConfig+0xe02>
 80010ea:	bf00      	nop
 80010ec:	40021000 	.word	0x40021000
 80010f0:	10908120 	.word	0x10908120
 80010f4:	2302      	movs	r3, #2
 80010f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80010fe:	fa93 f3a3 	rbit	r3, r3
 8001102:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001106:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800110a:	2202      	movs	r2, #2
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	fa93 f2a3 	rbit	r2, r3
 8001118:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001122:	2202      	movs	r2, #2
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	fa93 f2a3 	rbit	r2, r3
 8001130:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001134:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001136:	4ba5      	ldr	r3, [pc, #660]	; (80013cc <HAL_RCC_OscConfig+0x930>)
 8001138:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800113a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800113e:	2102      	movs	r1, #2
 8001140:	6019      	str	r1, [r3, #0]
 8001142:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	fa93 f1a3 	rbit	r1, r3
 800114c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001150:	6019      	str	r1, [r3, #0]
  return result;
 8001152:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	fab3 f383 	clz	r3, r3
 800115c:	b2db      	uxtb	r3, r3
 800115e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001162:	b2db      	uxtb	r3, r3
 8001164:	f003 031f 	and.w	r3, r3, #31
 8001168:	2101      	movs	r1, #1
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	4013      	ands	r3, r2
 8001170:	2b00      	cmp	r3, #0
 8001172:	d0b0      	beq.n	80010d6 <HAL_RCC_OscConfig+0x63a>
 8001174:	e06a      	b.n	800124c <HAL_RCC_OscConfig+0x7b0>
 8001176:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800117a:	2201      	movs	r2, #1
 800117c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800117e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	fa93 f2a3 	rbit	r2, r3
 8001188:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800118c:	601a      	str	r2, [r3, #0]
  return result;
 800118e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001192:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001194:	fab3 f383 	clz	r3, r3
 8001198:	b2db      	uxtb	r3, r3
 800119a:	461a      	mov	r2, r3
 800119c:	4b8c      	ldr	r3, [pc, #560]	; (80013d0 <HAL_RCC_OscConfig+0x934>)
 800119e:	4413      	add	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	461a      	mov	r2, r3
 80011a4:	2300      	movs	r3, #0
 80011a6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a8:	f7ff f9f0 	bl	800058c <HAL_GetTick>
 80011ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011b0:	e009      	b.n	80011c6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011b2:	f7ff f9eb 	bl	800058c <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e36b      	b.n	800189e <HAL_RCC_OscConfig+0xe02>
 80011c6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80011ca:	2202      	movs	r2, #2
 80011cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ce:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	fa93 f2a3 	rbit	r2, r3
 80011d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80011e2:	2202      	movs	r2, #2
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	fa93 f2a3 	rbit	r2, r3
 80011f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80011fa:	2202      	movs	r2, #2
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	fa93 f2a3 	rbit	r2, r3
 8001208:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800120c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800120e:	4b6f      	ldr	r3, [pc, #444]	; (80013cc <HAL_RCC_OscConfig+0x930>)
 8001210:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001212:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001216:	2102      	movs	r1, #2
 8001218:	6019      	str	r1, [r3, #0]
 800121a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	fa93 f1a3 	rbit	r1, r3
 8001224:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001228:	6019      	str	r1, [r3, #0]
  return result;
 800122a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	fab3 f383 	clz	r3, r3
 8001234:	b2db      	uxtb	r3, r3
 8001236:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800123a:	b2db      	uxtb	r3, r3
 800123c:	f003 031f 	and.w	r3, r3, #31
 8001240:	2101      	movs	r1, #1
 8001242:	fa01 f303 	lsl.w	r3, r1, r3
 8001246:	4013      	ands	r3, r2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1b2      	bne.n	80011b2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 8158 	beq.w	800150c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800125c:	2300      	movs	r3, #0
 800125e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001262:	4b5a      	ldr	r3, [pc, #360]	; (80013cc <HAL_RCC_OscConfig+0x930>)
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d112      	bne.n	8001294 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800126e:	4b57      	ldr	r3, [pc, #348]	; (80013cc <HAL_RCC_OscConfig+0x930>)
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	4a56      	ldr	r2, [pc, #344]	; (80013cc <HAL_RCC_OscConfig+0x930>)
 8001274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001278:	61d3      	str	r3, [r2, #28]
 800127a:	4b54      	ldr	r3, [pc, #336]	; (80013cc <HAL_RCC_OscConfig+0x930>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001282:	f107 0308 	add.w	r3, r7, #8
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	f107 0308 	add.w	r3, r7, #8
 800128c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800128e:	2301      	movs	r3, #1
 8001290:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001294:	4b4f      	ldr	r3, [pc, #316]	; (80013d4 <HAL_RCC_OscConfig+0x938>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800129c:	2b00      	cmp	r3, #0
 800129e:	d11a      	bne.n	80012d6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012a0:	4b4c      	ldr	r3, [pc, #304]	; (80013d4 <HAL_RCC_OscConfig+0x938>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a4b      	ldr	r2, [pc, #300]	; (80013d4 <HAL_RCC_OscConfig+0x938>)
 80012a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012aa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ac:	f7ff f96e 	bl	800058c <HAL_GetTick>
 80012b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b4:	e009      	b.n	80012ca <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012b6:	f7ff f969 	bl	800058c <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b64      	cmp	r3, #100	; 0x64
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e2e9      	b.n	800189e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ca:	4b42      	ldr	r3, [pc, #264]	; (80013d4 <HAL_RCC_OscConfig+0x938>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d0ef      	beq.n	80012b6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d106      	bne.n	80012ee <HAL_RCC_OscConfig+0x852>
 80012e0:	4b3a      	ldr	r3, [pc, #232]	; (80013cc <HAL_RCC_OscConfig+0x930>)
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	4a39      	ldr	r2, [pc, #228]	; (80013cc <HAL_RCC_OscConfig+0x930>)
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	6213      	str	r3, [r2, #32]
 80012ec:	e02f      	b.n	800134e <HAL_RCC_OscConfig+0x8b2>
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d10c      	bne.n	8001312 <HAL_RCC_OscConfig+0x876>
 80012f8:	4b34      	ldr	r3, [pc, #208]	; (80013cc <HAL_RCC_OscConfig+0x930>)
 80012fa:	6a1b      	ldr	r3, [r3, #32]
 80012fc:	4a33      	ldr	r2, [pc, #204]	; (80013cc <HAL_RCC_OscConfig+0x930>)
 80012fe:	f023 0301 	bic.w	r3, r3, #1
 8001302:	6213      	str	r3, [r2, #32]
 8001304:	4b31      	ldr	r3, [pc, #196]	; (80013cc <HAL_RCC_OscConfig+0x930>)
 8001306:	6a1b      	ldr	r3, [r3, #32]
 8001308:	4a30      	ldr	r2, [pc, #192]	; (80013cc <HAL_RCC_OscConfig+0x930>)
 800130a:	f023 0304 	bic.w	r3, r3, #4
 800130e:	6213      	str	r3, [r2, #32]
 8001310:	e01d      	b.n	800134e <HAL_RCC_OscConfig+0x8b2>
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	2b05      	cmp	r3, #5
 800131a:	d10c      	bne.n	8001336 <HAL_RCC_OscConfig+0x89a>
 800131c:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <HAL_RCC_OscConfig+0x930>)
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	4a2a      	ldr	r2, [pc, #168]	; (80013cc <HAL_RCC_OscConfig+0x930>)
 8001322:	f043 0304 	orr.w	r3, r3, #4
 8001326:	6213      	str	r3, [r2, #32]
 8001328:	4b28      	ldr	r3, [pc, #160]	; (80013cc <HAL_RCC_OscConfig+0x930>)
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	4a27      	ldr	r2, [pc, #156]	; (80013cc <HAL_RCC_OscConfig+0x930>)
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	6213      	str	r3, [r2, #32]
 8001334:	e00b      	b.n	800134e <HAL_RCC_OscConfig+0x8b2>
 8001336:	4b25      	ldr	r3, [pc, #148]	; (80013cc <HAL_RCC_OscConfig+0x930>)
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	4a24      	ldr	r2, [pc, #144]	; (80013cc <HAL_RCC_OscConfig+0x930>)
 800133c:	f023 0301 	bic.w	r3, r3, #1
 8001340:	6213      	str	r3, [r2, #32]
 8001342:	4b22      	ldr	r3, [pc, #136]	; (80013cc <HAL_RCC_OscConfig+0x930>)
 8001344:	6a1b      	ldr	r3, [r3, #32]
 8001346:	4a21      	ldr	r2, [pc, #132]	; (80013cc <HAL_RCC_OscConfig+0x930>)
 8001348:	f023 0304 	bic.w	r3, r3, #4
 800134c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d06b      	beq.n	8001430 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001358:	f7ff f918 	bl	800058c <HAL_GetTick>
 800135c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001360:	e00b      	b.n	800137a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001362:	f7ff f913 	bl	800058c <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001372:	4293      	cmp	r3, r2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e291      	b.n	800189e <HAL_RCC_OscConfig+0xe02>
 800137a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800137e:	2202      	movs	r2, #2
 8001380:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001382:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	fa93 f2a3 	rbit	r2, r3
 800138c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001396:	2202      	movs	r2, #2
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	fa93 f2a3 	rbit	r2, r3
 80013a4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80013a8:	601a      	str	r2, [r3, #0]
  return result;
 80013aa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80013ae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b0:	fab3 f383 	clz	r3, r3
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	095b      	lsrs	r3, r3, #5
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	f043 0302 	orr.w	r3, r3, #2
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d109      	bne.n	80013d8 <HAL_RCC_OscConfig+0x93c>
 80013c4:	4b01      	ldr	r3, [pc, #4]	; (80013cc <HAL_RCC_OscConfig+0x930>)
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	e014      	b.n	80013f4 <HAL_RCC_OscConfig+0x958>
 80013ca:	bf00      	nop
 80013cc:	40021000 	.word	0x40021000
 80013d0:	10908120 	.word	0x10908120
 80013d4:	40007000 	.word	0x40007000
 80013d8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80013dc:	2202      	movs	r2, #2
 80013de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	fa93 f2a3 	rbit	r2, r3
 80013ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	4bbb      	ldr	r3, [pc, #748]	; (80016e0 <HAL_RCC_OscConfig+0xc44>)
 80013f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80013f8:	2102      	movs	r1, #2
 80013fa:	6011      	str	r1, [r2, #0]
 80013fc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001400:	6812      	ldr	r2, [r2, #0]
 8001402:	fa92 f1a2 	rbit	r1, r2
 8001406:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800140a:	6011      	str	r1, [r2, #0]
  return result;
 800140c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001410:	6812      	ldr	r2, [r2, #0]
 8001412:	fab2 f282 	clz	r2, r2
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	f002 021f 	and.w	r2, r2, #31
 8001422:	2101      	movs	r1, #1
 8001424:	fa01 f202 	lsl.w	r2, r1, r2
 8001428:	4013      	ands	r3, r2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d099      	beq.n	8001362 <HAL_RCC_OscConfig+0x8c6>
 800142e:	e063      	b.n	80014f8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001430:	f7ff f8ac 	bl	800058c <HAL_GetTick>
 8001434:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001438:	e00b      	b.n	8001452 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800143a:	f7ff f8a7 	bl	800058c <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	f241 3288 	movw	r2, #5000	; 0x1388
 800144a:	4293      	cmp	r3, r2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e225      	b.n	800189e <HAL_RCC_OscConfig+0xe02>
 8001452:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001456:	2202      	movs	r2, #2
 8001458:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	fa93 f2a3 	rbit	r2, r3
 8001464:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800146e:	2202      	movs	r2, #2
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	fa93 f2a3 	rbit	r2, r3
 800147c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001480:	601a      	str	r2, [r3, #0]
  return result;
 8001482:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001486:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001488:	fab3 f383 	clz	r3, r3
 800148c:	b2db      	uxtb	r3, r3
 800148e:	095b      	lsrs	r3, r3, #5
 8001490:	b2db      	uxtb	r3, r3
 8001492:	f043 0302 	orr.w	r3, r3, #2
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d102      	bne.n	80014a2 <HAL_RCC_OscConfig+0xa06>
 800149c:	4b90      	ldr	r3, [pc, #576]	; (80016e0 <HAL_RCC_OscConfig+0xc44>)
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	e00d      	b.n	80014be <HAL_RCC_OscConfig+0xa22>
 80014a2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80014a6:	2202      	movs	r2, #2
 80014a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014aa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	fa93 f2a3 	rbit	r2, r3
 80014b4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	4b89      	ldr	r3, [pc, #548]	; (80016e0 <HAL_RCC_OscConfig+0xc44>)
 80014bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014be:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80014c2:	2102      	movs	r1, #2
 80014c4:	6011      	str	r1, [r2, #0]
 80014c6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80014ca:	6812      	ldr	r2, [r2, #0]
 80014cc:	fa92 f1a2 	rbit	r1, r2
 80014d0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80014d4:	6011      	str	r1, [r2, #0]
  return result;
 80014d6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80014da:	6812      	ldr	r2, [r2, #0]
 80014dc:	fab2 f282 	clz	r2, r2
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	f002 021f 	and.w	r2, r2, #31
 80014ec:	2101      	movs	r1, #1
 80014ee:	fa01 f202 	lsl.w	r2, r1, r2
 80014f2:	4013      	ands	r3, r2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1a0      	bne.n	800143a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014f8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d105      	bne.n	800150c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001500:	4b77      	ldr	r3, [pc, #476]	; (80016e0 <HAL_RCC_OscConfig+0xc44>)
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	4a76      	ldr	r2, [pc, #472]	; (80016e0 <HAL_RCC_OscConfig+0xc44>)
 8001506:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800150a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 81c2 	beq.w	800189c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001518:	4b71      	ldr	r3, [pc, #452]	; (80016e0 <HAL_RCC_OscConfig+0xc44>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 030c 	and.w	r3, r3, #12
 8001520:	2b08      	cmp	r3, #8
 8001522:	f000 819c 	beq.w	800185e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	69db      	ldr	r3, [r3, #28]
 800152c:	2b02      	cmp	r3, #2
 800152e:	f040 8114 	bne.w	800175a <HAL_RCC_OscConfig+0xcbe>
 8001532:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001536:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800153a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	fa93 f2a3 	rbit	r2, r3
 8001546:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800154a:	601a      	str	r2, [r3, #0]
  return result;
 800154c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001550:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001552:	fab3 f383 	clz	r3, r3
 8001556:	b2db      	uxtb	r3, r3
 8001558:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800155c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	461a      	mov	r2, r3
 8001564:	2300      	movs	r3, #0
 8001566:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001568:	f7ff f810 	bl	800058c <HAL_GetTick>
 800156c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001570:	e009      	b.n	8001586 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001572:	f7ff f80b 	bl	800058c <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e18b      	b.n	800189e <HAL_RCC_OscConfig+0xe02>
 8001586:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800158a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800158e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001590:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	fa93 f2a3 	rbit	r2, r3
 800159a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800159e:	601a      	str	r2, [r3, #0]
  return result;
 80015a0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015a4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015a6:	fab3 f383 	clz	r3, r3
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	095b      	lsrs	r3, r3, #5
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d102      	bne.n	80015c0 <HAL_RCC_OscConfig+0xb24>
 80015ba:	4b49      	ldr	r3, [pc, #292]	; (80016e0 <HAL_RCC_OscConfig+0xc44>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	e01b      	b.n	80015f8 <HAL_RCC_OscConfig+0xb5c>
 80015c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	fa93 f2a3 	rbit	r2, r3
 80015d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80015de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	fa93 f2a3 	rbit	r2, r3
 80015ee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	4b3a      	ldr	r3, [pc, #232]	; (80016e0 <HAL_RCC_OscConfig+0xc44>)
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80015fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001600:	6011      	str	r1, [r2, #0]
 8001602:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001606:	6812      	ldr	r2, [r2, #0]
 8001608:	fa92 f1a2 	rbit	r1, r2
 800160c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001610:	6011      	str	r1, [r2, #0]
  return result;
 8001612:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001616:	6812      	ldr	r2, [r2, #0]
 8001618:	fab2 f282 	clz	r2, r2
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	f042 0220 	orr.w	r2, r2, #32
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	f002 021f 	and.w	r2, r2, #31
 8001628:	2101      	movs	r1, #1
 800162a:	fa01 f202 	lsl.w	r2, r1, r2
 800162e:	4013      	ands	r3, r2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d19e      	bne.n	8001572 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001634:	4b2a      	ldr	r3, [pc, #168]	; (80016e0 <HAL_RCC_OscConfig+0xc44>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	430b      	orrs	r3, r1
 800164a:	4925      	ldr	r1, [pc, #148]	; (80016e0 <HAL_RCC_OscConfig+0xc44>)
 800164c:	4313      	orrs	r3, r2
 800164e:	604b      	str	r3, [r1, #4]
 8001650:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001654:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001658:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	fa93 f2a3 	rbit	r2, r3
 8001664:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001668:	601a      	str	r2, [r3, #0]
  return result;
 800166a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800166e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001670:	fab3 f383 	clz	r3, r3
 8001674:	b2db      	uxtb	r3, r3
 8001676:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800167a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	461a      	mov	r2, r3
 8001682:	2301      	movs	r3, #1
 8001684:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001686:	f7fe ff81 	bl	800058c <HAL_GetTick>
 800168a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800168e:	e009      	b.n	80016a4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001690:	f7fe ff7c 	bl	800058c <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e0fc      	b.n	800189e <HAL_RCC_OscConfig+0xe02>
 80016a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	fa93 f2a3 	rbit	r2, r3
 80016b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016bc:	601a      	str	r2, [r3, #0]
  return result;
 80016be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016c2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016c4:	fab3 f383 	clz	r3, r3
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	095b      	lsrs	r3, r3, #5
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d105      	bne.n	80016e4 <HAL_RCC_OscConfig+0xc48>
 80016d8:	4b01      	ldr	r3, [pc, #4]	; (80016e0 <HAL_RCC_OscConfig+0xc44>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	e01e      	b.n	800171c <HAL_RCC_OscConfig+0xc80>
 80016de:	bf00      	nop
 80016e0:	40021000 	.word	0x40021000
 80016e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	fa93 f2a3 	rbit	r2, r3
 80016f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001702:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	fa93 f2a3 	rbit	r2, r3
 8001712:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	4b63      	ldr	r3, [pc, #396]	; (80018a8 <HAL_RCC_OscConfig+0xe0c>)
 800171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001720:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001724:	6011      	str	r1, [r2, #0]
 8001726:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800172a:	6812      	ldr	r2, [r2, #0]
 800172c:	fa92 f1a2 	rbit	r1, r2
 8001730:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001734:	6011      	str	r1, [r2, #0]
  return result;
 8001736:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800173a:	6812      	ldr	r2, [r2, #0]
 800173c:	fab2 f282 	clz	r2, r2
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	f042 0220 	orr.w	r2, r2, #32
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	f002 021f 	and.w	r2, r2, #31
 800174c:	2101      	movs	r1, #1
 800174e:	fa01 f202 	lsl.w	r2, r1, r2
 8001752:	4013      	ands	r3, r2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d09b      	beq.n	8001690 <HAL_RCC_OscConfig+0xbf4>
 8001758:	e0a0      	b.n	800189c <HAL_RCC_OscConfig+0xe00>
 800175a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800175e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001762:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001764:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	fa93 f2a3 	rbit	r2, r3
 800176e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001772:	601a      	str	r2, [r3, #0]
  return result;
 8001774:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001778:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800177a:	fab3 f383 	clz	r3, r3
 800177e:	b2db      	uxtb	r3, r3
 8001780:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001784:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	461a      	mov	r2, r3
 800178c:	2300      	movs	r3, #0
 800178e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001790:	f7fe fefc 	bl	800058c <HAL_GetTick>
 8001794:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001798:	e009      	b.n	80017ae <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800179a:	f7fe fef7 	bl	800058c <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e077      	b.n	800189e <HAL_RCC_OscConfig+0xe02>
 80017ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	fa93 f2a3 	rbit	r2, r3
 80017c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c6:	601a      	str	r2, [r3, #0]
  return result;
 80017c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017cc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ce:	fab3 f383 	clz	r3, r3
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	095b      	lsrs	r3, r3, #5
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d102      	bne.n	80017e8 <HAL_RCC_OscConfig+0xd4c>
 80017e2:	4b31      	ldr	r3, [pc, #196]	; (80018a8 <HAL_RCC_OscConfig+0xe0c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	e01b      	b.n	8001820 <HAL_RCC_OscConfig+0xd84>
 80017e8:	f107 0320 	add.w	r3, r7, #32
 80017ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f2:	f107 0320 	add.w	r3, r7, #32
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	fa93 f2a3 	rbit	r2, r3
 80017fc:	f107 031c 	add.w	r3, r7, #28
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	f107 0318 	add.w	r3, r7, #24
 8001806:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	f107 0318 	add.w	r3, r7, #24
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	fa93 f2a3 	rbit	r2, r3
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <HAL_RCC_OscConfig+0xe0c>)
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	f107 0210 	add.w	r2, r7, #16
 8001824:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001828:	6011      	str	r1, [r2, #0]
 800182a:	f107 0210 	add.w	r2, r7, #16
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	fa92 f1a2 	rbit	r1, r2
 8001834:	f107 020c 	add.w	r2, r7, #12
 8001838:	6011      	str	r1, [r2, #0]
  return result;
 800183a:	f107 020c 	add.w	r2, r7, #12
 800183e:	6812      	ldr	r2, [r2, #0]
 8001840:	fab2 f282 	clz	r2, r2
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	f042 0220 	orr.w	r2, r2, #32
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	f002 021f 	and.w	r2, r2, #31
 8001850:	2101      	movs	r1, #1
 8001852:	fa01 f202 	lsl.w	r2, r1, r2
 8001856:	4013      	ands	r3, r2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d19e      	bne.n	800179a <HAL_RCC_OscConfig+0xcfe>
 800185c:	e01e      	b.n	800189c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d101      	bne.n	800186c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e018      	b.n	800189e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800186c:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <HAL_RCC_OscConfig+0xe0c>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001874:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001878:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	429a      	cmp	r2, r3
 8001884:	d108      	bne.n	8001898 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001886:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800188a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001894:	429a      	cmp	r2, r3
 8001896:	d001      	beq.n	800189c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e000      	b.n	800189e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40021000 	.word	0x40021000

080018ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b09e      	sub	sp, #120	; 0x78
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e162      	b.n	8001b8a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018c4:	4b90      	ldr	r3, [pc, #576]	; (8001b08 <HAL_RCC_ClockConfig+0x25c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d910      	bls.n	80018f4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d2:	4b8d      	ldr	r3, [pc, #564]	; (8001b08 <HAL_RCC_ClockConfig+0x25c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f023 0207 	bic.w	r2, r3, #7
 80018da:	498b      	ldr	r1, [pc, #556]	; (8001b08 <HAL_RCC_ClockConfig+0x25c>)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	4313      	orrs	r3, r2
 80018e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e2:	4b89      	ldr	r3, [pc, #548]	; (8001b08 <HAL_RCC_ClockConfig+0x25c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d001      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e14a      	b.n	8001b8a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d008      	beq.n	8001912 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001900:	4b82      	ldr	r3, [pc, #520]	; (8001b0c <HAL_RCC_ClockConfig+0x260>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	497f      	ldr	r1, [pc, #508]	; (8001b0c <HAL_RCC_ClockConfig+0x260>)
 800190e:	4313      	orrs	r3, r2
 8001910:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 80dc 	beq.w	8001ad8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d13c      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xf6>
 8001928:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800192c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001930:	fa93 f3a3 	rbit	r3, r3
 8001934:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001938:	fab3 f383 	clz	r3, r3
 800193c:	b2db      	uxtb	r3, r3
 800193e:	095b      	lsrs	r3, r3, #5
 8001940:	b2db      	uxtb	r3, r3
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b01      	cmp	r3, #1
 800194a:	d102      	bne.n	8001952 <HAL_RCC_ClockConfig+0xa6>
 800194c:	4b6f      	ldr	r3, [pc, #444]	; (8001b0c <HAL_RCC_ClockConfig+0x260>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	e00f      	b.n	8001972 <HAL_RCC_ClockConfig+0xc6>
 8001952:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001956:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001958:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800195a:	fa93 f3a3 	rbit	r3, r3
 800195e:	667b      	str	r3, [r7, #100]	; 0x64
 8001960:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001964:	663b      	str	r3, [r7, #96]	; 0x60
 8001966:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001968:	fa93 f3a3 	rbit	r3, r3
 800196c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800196e:	4b67      	ldr	r3, [pc, #412]	; (8001b0c <HAL_RCC_ClockConfig+0x260>)
 8001970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001972:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001976:	65ba      	str	r2, [r7, #88]	; 0x58
 8001978:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800197a:	fa92 f2a2 	rbit	r2, r2
 800197e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001980:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001982:	fab2 f282 	clz	r2, r2
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	f042 0220 	orr.w	r2, r2, #32
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	f002 021f 	and.w	r2, r2, #31
 8001992:	2101      	movs	r1, #1
 8001994:	fa01 f202 	lsl.w	r2, r1, r2
 8001998:	4013      	ands	r3, r2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d17b      	bne.n	8001a96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e0f3      	b.n	8001b8a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d13c      	bne.n	8001a24 <HAL_RCC_ClockConfig+0x178>
 80019aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019ae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019b2:	fa93 f3a3 	rbit	r3, r3
 80019b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80019b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ba:	fab3 f383 	clz	r3, r3
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	095b      	lsrs	r3, r3, #5
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d102      	bne.n	80019d4 <HAL_RCC_ClockConfig+0x128>
 80019ce:	4b4f      	ldr	r3, [pc, #316]	; (8001b0c <HAL_RCC_ClockConfig+0x260>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	e00f      	b.n	80019f4 <HAL_RCC_ClockConfig+0x148>
 80019d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019d8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019dc:	fa93 f3a3 	rbit	r3, r3
 80019e0:	647b      	str	r3, [r7, #68]	; 0x44
 80019e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019e6:	643b      	str	r3, [r7, #64]	; 0x40
 80019e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019ea:	fa93 f3a3 	rbit	r3, r3
 80019ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019f0:	4b46      	ldr	r3, [pc, #280]	; (8001b0c <HAL_RCC_ClockConfig+0x260>)
 80019f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019f8:	63ba      	str	r2, [r7, #56]	; 0x38
 80019fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80019fc:	fa92 f2a2 	rbit	r2, r2
 8001a00:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001a02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a04:	fab2 f282 	clz	r2, r2
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	f042 0220 	orr.w	r2, r2, #32
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	f002 021f 	and.w	r2, r2, #31
 8001a14:	2101      	movs	r1, #1
 8001a16:	fa01 f202 	lsl.w	r2, r1, r2
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d13a      	bne.n	8001a96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e0b2      	b.n	8001b8a <HAL_RCC_ClockConfig+0x2de>
 8001a24:	2302      	movs	r3, #2
 8001a26:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a2a:	fa93 f3a3 	rbit	r3, r3
 8001a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a32:	fab3 f383 	clz	r3, r3
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	095b      	lsrs	r3, r3, #5
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d102      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x1a0>
 8001a46:	4b31      	ldr	r3, [pc, #196]	; (8001b0c <HAL_RCC_ClockConfig+0x260>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	e00d      	b.n	8001a68 <HAL_RCC_ClockConfig+0x1bc>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a52:	fa93 f3a3 	rbit	r3, r3
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
 8001a58:	2302      	movs	r3, #2
 8001a5a:	623b      	str	r3, [r7, #32]
 8001a5c:	6a3b      	ldr	r3, [r7, #32]
 8001a5e:	fa93 f3a3 	rbit	r3, r3
 8001a62:	61fb      	str	r3, [r7, #28]
 8001a64:	4b29      	ldr	r3, [pc, #164]	; (8001b0c <HAL_RCC_ClockConfig+0x260>)
 8001a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a68:	2202      	movs	r2, #2
 8001a6a:	61ba      	str	r2, [r7, #24]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	fa92 f2a2 	rbit	r2, r2
 8001a72:	617a      	str	r2, [r7, #20]
  return result;
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	fab2 f282 	clz	r2, r2
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	f042 0220 	orr.w	r2, r2, #32
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	f002 021f 	and.w	r2, r2, #31
 8001a86:	2101      	movs	r1, #1
 8001a88:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e079      	b.n	8001b8a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a96:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <HAL_RCC_ClockConfig+0x260>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f023 0203 	bic.w	r2, r3, #3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	491a      	ldr	r1, [pc, #104]	; (8001b0c <HAL_RCC_ClockConfig+0x260>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aa8:	f7fe fd70 	bl	800058c <HAL_GetTick>
 8001aac:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aae:	e00a      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab0:	f7fe fd6c 	bl	800058c <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e061      	b.n	8001b8a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <HAL_RCC_ClockConfig+0x260>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 020c 	and.w	r2, r3, #12
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d1eb      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <HAL_RCC_ClockConfig+0x25c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d214      	bcs.n	8001b10 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae6:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <HAL_RCC_ClockConfig+0x25c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f023 0207 	bic.w	r2, r3, #7
 8001aee:	4906      	ldr	r1, [pc, #24]	; (8001b08 <HAL_RCC_ClockConfig+0x25c>)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af6:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <HAL_RCC_ClockConfig+0x25c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d005      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e040      	b.n	8001b8a <HAL_RCC_ClockConfig+0x2de>
 8001b08:	40022000 	.word	0x40022000
 8001b0c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d008      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b1c:	4b1d      	ldr	r3, [pc, #116]	; (8001b94 <HAL_RCC_ClockConfig+0x2e8>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	491a      	ldr	r1, [pc, #104]	; (8001b94 <HAL_RCC_ClockConfig+0x2e8>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d009      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b3a:	4b16      	ldr	r3, [pc, #88]	; (8001b94 <HAL_RCC_ClockConfig+0x2e8>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	4912      	ldr	r1, [pc, #72]	; (8001b94 <HAL_RCC_ClockConfig+0x2e8>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b4e:	f000 f829 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 8001b52:	4601      	mov	r1, r0
 8001b54:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <HAL_RCC_ClockConfig+0x2e8>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b5c:	22f0      	movs	r2, #240	; 0xf0
 8001b5e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	fa92 f2a2 	rbit	r2, r2
 8001b66:	60fa      	str	r2, [r7, #12]
  return result;
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	fab2 f282 	clz	r2, r2
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	40d3      	lsrs	r3, r2
 8001b72:	4a09      	ldr	r2, [pc, #36]	; (8001b98 <HAL_RCC_ClockConfig+0x2ec>)
 8001b74:	5cd3      	ldrb	r3, [r2, r3]
 8001b76:	fa21 f303 	lsr.w	r3, r1, r3
 8001b7a:	4a08      	ldr	r2, [pc, #32]	; (8001b9c <HAL_RCC_ClockConfig+0x2f0>)
 8001b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <HAL_RCC_ClockConfig+0x2f4>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fcbe 	bl	8000504 <HAL_InitTick>
  
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3778      	adds	r7, #120	; 0x78
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40021000 	.word	0x40021000
 8001b98:	08002518 	.word	0x08002518
 8001b9c:	20000010 	.word	0x20000010
 8001ba0:	20000014 	.word	0x20000014

08001ba4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b08b      	sub	sp, #44	; 0x2c
 8001ba8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61bb      	str	r3, [r7, #24]
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001bbe:	4b29      	ldr	r3, [pc, #164]	; (8001c64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f003 030c 	and.w	r3, r3, #12
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d002      	beq.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x30>
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d003      	beq.n	8001bda <HAL_RCC_GetSysClockFreq+0x36>
 8001bd2:	e03c      	b.n	8001c4e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bd4:	4b24      	ldr	r3, [pc, #144]	; (8001c68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001bd6:	623b      	str	r3, [r7, #32]
      break;
 8001bd8:	e03c      	b.n	8001c54 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001be0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001be4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	fa92 f2a2 	rbit	r2, r2
 8001bec:	607a      	str	r2, [r7, #4]
  return result;
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	fab2 f282 	clz	r2, r2
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	40d3      	lsrs	r3, r2
 8001bf8:	4a1c      	ldr	r2, [pc, #112]	; (8001c6c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001bfa:	5cd3      	ldrb	r3, [r2, r3]
 8001bfc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001bfe:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	220f      	movs	r2, #15
 8001c08:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	fa92 f2a2 	rbit	r2, r2
 8001c10:	60fa      	str	r2, [r7, #12]
  return result;
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	fab2 f282 	clz	r2, r2
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	40d3      	lsrs	r3, r2
 8001c1c:	4a14      	ldr	r2, [pc, #80]	; (8001c70 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001c1e:	5cd3      	ldrb	r3, [r2, r3]
 8001c20:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d008      	beq.n	8001c3e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c2c:	4a0e      	ldr	r2, [pc, #56]	; (8001c68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	fb02 f303 	mul.w	r3, r2, r3
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c3c:	e004      	b.n	8001c48 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	4a0c      	ldr	r2, [pc, #48]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001c42:	fb02 f303 	mul.w	r3, r2, r3
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	623b      	str	r3, [r7, #32]
      break;
 8001c4c:	e002      	b.n	8001c54 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c4e:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c50:	623b      	str	r3, [r7, #32]
      break;
 8001c52:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c54:	6a3b      	ldr	r3, [r7, #32]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	372c      	adds	r7, #44	; 0x2c
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	40021000 	.word	0x40021000
 8001c68:	007a1200 	.word	0x007a1200
 8001c6c:	08002530 	.word	0x08002530
 8001c70:	08002540 	.word	0x08002540
 8001c74:	003d0900 	.word	0x003d0900

08001c78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c7c:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	20000010 	.word	0x20000010

08001c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001c96:	f7ff ffef 	bl	8001c78 <HAL_RCC_GetHCLKFreq>
 8001c9a:	4601      	mov	r1, r0
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ca4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001ca8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	fa92 f2a2 	rbit	r2, r2
 8001cb0:	603a      	str	r2, [r7, #0]
  return result;
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	fab2 f282 	clz	r2, r2
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	40d3      	lsrs	r3, r2
 8001cbc:	4a04      	ldr	r2, [pc, #16]	; (8001cd0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001cbe:	5cd3      	ldrb	r3, [r2, r3]
 8001cc0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	08002528 	.word	0x08002528

08001cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001cda:	f7ff ffcd 	bl	8001c78 <HAL_RCC_GetHCLKFreq>
 8001cde:	4601      	mov	r1, r0
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001ce8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001cec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	fa92 f2a2 	rbit	r2, r2
 8001cf4:	603a      	str	r2, [r7, #0]
  return result;
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	fab2 f282 	clz	r2, r2
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	40d3      	lsrs	r3, r2
 8001d00:	4a04      	ldr	r2, [pc, #16]	; (8001d14 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001d02:	5cd3      	ldrb	r3, [r2, r3]
 8001d04:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40021000 	.word	0x40021000
 8001d14:	08002528 	.word	0x08002528

08001d18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e040      	b.n	8001dac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d106      	bne.n	8001d40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7fe fb24 	bl	8000388 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2224      	movs	r2, #36	; 0x24
 8001d44:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0201 	bic.w	r2, r2, #1
 8001d54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f8c0 	bl	8001edc <UART_SetConfig>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d101      	bne.n	8001d66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e022      	b.n	8001dac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d002      	beq.n	8001d74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f9ea 	bl	8002148 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0201 	orr.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 fa71 	bl	800228c <UART_CheckIdleState>
 8001daa:	4603      	mov	r3, r0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08a      	sub	sp, #40	; 0x28
 8001db8:	af02      	add	r7, sp, #8
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	603b      	str	r3, [r7, #0]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001dc8:	2b20      	cmp	r3, #32
 8001dca:	f040 8082 	bne.w	8001ed2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d002      	beq.n	8001dda <HAL_UART_Transmit+0x26>
 8001dd4:	88fb      	ldrh	r3, [r7, #6]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e07a      	b.n	8001ed4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <HAL_UART_Transmit+0x38>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e073      	b.n	8001ed4 <HAL_UART_Transmit+0x120>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2221      	movs	r2, #33	; 0x21
 8001e00:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e02:	f7fe fbc3 	bl	800058c <HAL_GetTick>
 8001e06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	88fa      	ldrh	r2, [r7, #6]
 8001e0c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	88fa      	ldrh	r2, [r7, #6]
 8001e14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e20:	d108      	bne.n	8001e34 <HAL_UART_Transmit+0x80>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d104      	bne.n	8001e34 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	61bb      	str	r3, [r7, #24]
 8001e32:	e003      	b.n	8001e3c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8001e44:	e02d      	b.n	8001ea2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	2180      	movs	r1, #128	; 0x80
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f000 fa64 	bl	800231e <UART_WaitOnFlagUntilTimeout>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e039      	b.n	8001ed4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10b      	bne.n	8001e7e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	881a      	ldrh	r2, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e72:	b292      	uxth	r2, r2
 8001e74:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	3302      	adds	r3, #2
 8001e7a:	61bb      	str	r3, [r7, #24]
 8001e7c:	e008      	b.n	8001e90 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	781a      	ldrb	r2, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	b292      	uxth	r2, r2
 8001e88:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1cb      	bne.n	8001e46 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	2140      	movs	r1, #64	; 0x40
 8001eb8:	68f8      	ldr	r0, [r7, #12]
 8001eba:	f000 fa30 	bl	800231e <UART_WaitOnFlagUntilTimeout>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e005      	b.n	8001ed4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2220      	movs	r2, #32
 8001ecc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	e000      	b.n	8001ed4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8001ed2:	2302      	movs	r3, #2
  }
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3720      	adds	r7, #32
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b088      	sub	sp, #32
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	4b8a      	ldr	r3, [pc, #552]	; (8002130 <UART_SetConfig+0x254>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6812      	ldr	r2, [r2, #0]
 8001f0e:	6979      	ldr	r1, [r7, #20]
 8001f10:	430b      	orrs	r3, r1
 8001f12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a78      	ldr	r2, [pc, #480]	; (8002134 <UART_SetConfig+0x258>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d120      	bne.n	8001f9a <UART_SetConfig+0xbe>
 8001f58:	4b77      	ldr	r3, [pc, #476]	; (8002138 <UART_SetConfig+0x25c>)
 8001f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	2b03      	cmp	r3, #3
 8001f62:	d817      	bhi.n	8001f94 <UART_SetConfig+0xb8>
 8001f64:	a201      	add	r2, pc, #4	; (adr r2, 8001f6c <UART_SetConfig+0x90>)
 8001f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f6a:	bf00      	nop
 8001f6c:	08001f7d 	.word	0x08001f7d
 8001f70:	08001f89 	.word	0x08001f89
 8001f74:	08001f8f 	.word	0x08001f8f
 8001f78:	08001f83 	.word	0x08001f83
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	77fb      	strb	r3, [r7, #31]
 8001f80:	e01d      	b.n	8001fbe <UART_SetConfig+0xe2>
 8001f82:	2302      	movs	r3, #2
 8001f84:	77fb      	strb	r3, [r7, #31]
 8001f86:	e01a      	b.n	8001fbe <UART_SetConfig+0xe2>
 8001f88:	2304      	movs	r3, #4
 8001f8a:	77fb      	strb	r3, [r7, #31]
 8001f8c:	e017      	b.n	8001fbe <UART_SetConfig+0xe2>
 8001f8e:	2308      	movs	r3, #8
 8001f90:	77fb      	strb	r3, [r7, #31]
 8001f92:	e014      	b.n	8001fbe <UART_SetConfig+0xe2>
 8001f94:	2310      	movs	r3, #16
 8001f96:	77fb      	strb	r3, [r7, #31]
 8001f98:	e011      	b.n	8001fbe <UART_SetConfig+0xe2>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a67      	ldr	r2, [pc, #412]	; (800213c <UART_SetConfig+0x260>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d102      	bne.n	8001faa <UART_SetConfig+0xce>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	77fb      	strb	r3, [r7, #31]
 8001fa8:	e009      	b.n	8001fbe <UART_SetConfig+0xe2>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a64      	ldr	r2, [pc, #400]	; (8002140 <UART_SetConfig+0x264>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d102      	bne.n	8001fba <UART_SetConfig+0xde>
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	77fb      	strb	r3, [r7, #31]
 8001fb8:	e001      	b.n	8001fbe <UART_SetConfig+0xe2>
 8001fba:	2310      	movs	r3, #16
 8001fbc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fc6:	d15b      	bne.n	8002080 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8001fc8:	7ffb      	ldrb	r3, [r7, #31]
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d827      	bhi.n	800201e <UART_SetConfig+0x142>
 8001fce:	a201      	add	r2, pc, #4	; (adr r2, 8001fd4 <UART_SetConfig+0xf8>)
 8001fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd4:	08001ff9 	.word	0x08001ff9
 8001fd8:	08002001 	.word	0x08002001
 8001fdc:	08002009 	.word	0x08002009
 8001fe0:	0800201f 	.word	0x0800201f
 8001fe4:	0800200f 	.word	0x0800200f
 8001fe8:	0800201f 	.word	0x0800201f
 8001fec:	0800201f 	.word	0x0800201f
 8001ff0:	0800201f 	.word	0x0800201f
 8001ff4:	08002017 	.word	0x08002017
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001ff8:	f7ff fe4a 	bl	8001c90 <HAL_RCC_GetPCLK1Freq>
 8001ffc:	61b8      	str	r0, [r7, #24]
        break;
 8001ffe:	e013      	b.n	8002028 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002000:	f7ff fe68 	bl	8001cd4 <HAL_RCC_GetPCLK2Freq>
 8002004:	61b8      	str	r0, [r7, #24]
        break;
 8002006:	e00f      	b.n	8002028 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002008:	4b4e      	ldr	r3, [pc, #312]	; (8002144 <UART_SetConfig+0x268>)
 800200a:	61bb      	str	r3, [r7, #24]
        break;
 800200c:	e00c      	b.n	8002028 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800200e:	f7ff fdc9 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 8002012:	61b8      	str	r0, [r7, #24]
        break;
 8002014:	e008      	b.n	8002028 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800201a:	61bb      	str	r3, [r7, #24]
        break;
 800201c:	e004      	b.n	8002028 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800201e:	2300      	movs	r3, #0
 8002020:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	77bb      	strb	r3, [r7, #30]
        break;
 8002026:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d074      	beq.n	8002118 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	005a      	lsls	r2, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	085b      	lsrs	r3, r3, #1
 8002038:	441a      	add	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002042:	b29b      	uxth	r3, r3
 8002044:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	2b0f      	cmp	r3, #15
 800204a:	d916      	bls.n	800207a <UART_SetConfig+0x19e>
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002052:	d212      	bcs.n	800207a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	b29b      	uxth	r3, r3
 8002058:	f023 030f 	bic.w	r3, r3, #15
 800205c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	085b      	lsrs	r3, r3, #1
 8002062:	b29b      	uxth	r3, r3
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	b29a      	uxth	r2, r3
 800206a:	89fb      	ldrh	r3, [r7, #14]
 800206c:	4313      	orrs	r3, r2
 800206e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	89fa      	ldrh	r2, [r7, #14]
 8002076:	60da      	str	r2, [r3, #12]
 8002078:	e04e      	b.n	8002118 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	77bb      	strb	r3, [r7, #30]
 800207e:	e04b      	b.n	8002118 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002080:	7ffb      	ldrb	r3, [r7, #31]
 8002082:	2b08      	cmp	r3, #8
 8002084:	d827      	bhi.n	80020d6 <UART_SetConfig+0x1fa>
 8002086:	a201      	add	r2, pc, #4	; (adr r2, 800208c <UART_SetConfig+0x1b0>)
 8002088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800208c:	080020b1 	.word	0x080020b1
 8002090:	080020b9 	.word	0x080020b9
 8002094:	080020c1 	.word	0x080020c1
 8002098:	080020d7 	.word	0x080020d7
 800209c:	080020c7 	.word	0x080020c7
 80020a0:	080020d7 	.word	0x080020d7
 80020a4:	080020d7 	.word	0x080020d7
 80020a8:	080020d7 	.word	0x080020d7
 80020ac:	080020cf 	.word	0x080020cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80020b0:	f7ff fdee 	bl	8001c90 <HAL_RCC_GetPCLK1Freq>
 80020b4:	61b8      	str	r0, [r7, #24]
        break;
 80020b6:	e013      	b.n	80020e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80020b8:	f7ff fe0c 	bl	8001cd4 <HAL_RCC_GetPCLK2Freq>
 80020bc:	61b8      	str	r0, [r7, #24]
        break;
 80020be:	e00f      	b.n	80020e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80020c0:	4b20      	ldr	r3, [pc, #128]	; (8002144 <UART_SetConfig+0x268>)
 80020c2:	61bb      	str	r3, [r7, #24]
        break;
 80020c4:	e00c      	b.n	80020e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80020c6:	f7ff fd6d 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 80020ca:	61b8      	str	r0, [r7, #24]
        break;
 80020cc:	e008      	b.n	80020e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80020ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020d2:	61bb      	str	r3, [r7, #24]
        break;
 80020d4:	e004      	b.n	80020e0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	77bb      	strb	r3, [r7, #30]
        break;
 80020de:	bf00      	nop
    }

    if (pclk != 0U)
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d018      	beq.n	8002118 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	085a      	lsrs	r2, r3, #1
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	441a      	add	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	2b0f      	cmp	r3, #15
 8002100:	d908      	bls.n	8002114 <UART_SetConfig+0x238>
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002108:	d204      	bcs.n	8002114 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	e001      	b.n	8002118 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002124:	7fbb      	ldrb	r3, [r7, #30]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3720      	adds	r7, #32
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	efff69f3 	.word	0xefff69f3
 8002134:	40013800 	.word	0x40013800
 8002138:	40021000 	.word	0x40021000
 800213c:	40004400 	.word	0x40004400
 8002140:	40004800 	.word	0x40004800
 8002144:	007a1200 	.word	0x007a1200

08002148 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00a      	beq.n	8002172 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00a      	beq.n	8002194 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	430a      	orrs	r2, r1
 8002192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00a      	beq.n	80021b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00a      	beq.n	80021d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	f003 0310 	and.w	r3, r3, #16
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00a      	beq.n	80021fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	f003 0320 	and.w	r3, r3, #32
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00a      	beq.n	800221c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002224:	2b00      	cmp	r3, #0
 8002226:	d01a      	beq.n	800225e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	430a      	orrs	r2, r1
 800223c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002246:	d10a      	bne.n	800225e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00a      	beq.n	8002280 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	430a      	orrs	r2, r1
 800227e:	605a      	str	r2, [r3, #4]
  }
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af02      	add	r7, sp, #8
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800229c:	f7fe f976 	bl	800058c <HAL_GetTick>
 80022a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0308 	and.w	r3, r3, #8
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d10e      	bne.n	80022ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80022b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f82d 	bl	800231e <UART_WaitOnFlagUntilTimeout>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e023      	b.n	8002316 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d10e      	bne.n	80022fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80022dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f817 	bl	800231e <UART_WaitOnFlagUntilTimeout>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e00d      	b.n	8002316 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2220      	movs	r2, #32
 80022fe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2220      	movs	r2, #32
 8002304:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b09c      	sub	sp, #112	; 0x70
 8002322:	af00      	add	r7, sp, #0
 8002324:	60f8      	str	r0, [r7, #12]
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	603b      	str	r3, [r7, #0]
 800232a:	4613      	mov	r3, r2
 800232c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800232e:	e0a5      	b.n	800247c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002330:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002336:	f000 80a1 	beq.w	800247c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800233a:	f7fe f927 	bl	800058c <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002346:	429a      	cmp	r2, r3
 8002348:	d302      	bcc.n	8002350 <UART_WaitOnFlagUntilTimeout+0x32>
 800234a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800234c:	2b00      	cmp	r3, #0
 800234e:	d13e      	bne.n	80023ce <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002358:	e853 3f00 	ldrex	r3, [r3]
 800235c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800235e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002360:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002364:	667b      	str	r3, [r7, #100]	; 0x64
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	461a      	mov	r2, r3
 800236c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800236e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002370:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002372:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002374:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002376:	e841 2300 	strex	r3, r2, [r1]
 800237a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800237c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1e6      	bne.n	8002350 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	3308      	adds	r3, #8
 8002388:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800238a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800238c:	e853 3f00 	ldrex	r3, [r3]
 8002390:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002394:	f023 0301 	bic.w	r3, r3, #1
 8002398:	663b      	str	r3, [r7, #96]	; 0x60
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	3308      	adds	r3, #8
 80023a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80023a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80023a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023aa:	e841 2300 	strex	r3, r2, [r1]
 80023ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80023b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1e5      	bne.n	8002382 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2220      	movs	r2, #32
 80023ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2220      	movs	r2, #32
 80023c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e067      	b.n	800249e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d04f      	beq.n	800247c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023ea:	d147      	bne.n	800247c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fe:	e853 3f00 	ldrex	r3, [r3]
 8002402:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800240a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	461a      	mov	r2, r3
 8002412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002414:	637b      	str	r3, [r7, #52]	; 0x34
 8002416:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002418:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800241a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800241c:	e841 2300 	strex	r3, r2, [r1]
 8002420:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1e6      	bne.n	80023f6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	3308      	adds	r3, #8
 800242e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	e853 3f00 	ldrex	r3, [r3]
 8002436:	613b      	str	r3, [r7, #16]
   return(result);
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	f023 0301 	bic.w	r3, r3, #1
 800243e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	3308      	adds	r3, #8
 8002446:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002448:	623a      	str	r2, [r7, #32]
 800244a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800244c:	69f9      	ldr	r1, [r7, #28]
 800244e:	6a3a      	ldr	r2, [r7, #32]
 8002450:	e841 2300 	strex	r3, r2, [r1]
 8002454:	61bb      	str	r3, [r7, #24]
   return(result);
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1e5      	bne.n	8002428 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2220      	movs	r2, #32
 8002460:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2220      	movs	r2, #32
 8002466:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2220      	movs	r2, #32
 800246c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e010      	b.n	800249e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	69da      	ldr	r2, [r3, #28]
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	4013      	ands	r3, r2
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	429a      	cmp	r2, r3
 800248a:	bf0c      	ite	eq
 800248c:	2301      	moveq	r3, #1
 800248e:	2300      	movne	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	461a      	mov	r2, r3
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	429a      	cmp	r2, r3
 8002498:	f43f af4a 	beq.w	8002330 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3770      	adds	r7, #112	; 0x70
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <__libc_init_array>:
 80024a8:	b570      	push	{r4, r5, r6, lr}
 80024aa:	4d0d      	ldr	r5, [pc, #52]	; (80024e0 <__libc_init_array+0x38>)
 80024ac:	4c0d      	ldr	r4, [pc, #52]	; (80024e4 <__libc_init_array+0x3c>)
 80024ae:	1b64      	subs	r4, r4, r5
 80024b0:	10a4      	asrs	r4, r4, #2
 80024b2:	2600      	movs	r6, #0
 80024b4:	42a6      	cmp	r6, r4
 80024b6:	d109      	bne.n	80024cc <__libc_init_array+0x24>
 80024b8:	4d0b      	ldr	r5, [pc, #44]	; (80024e8 <__libc_init_array+0x40>)
 80024ba:	4c0c      	ldr	r4, [pc, #48]	; (80024ec <__libc_init_array+0x44>)
 80024bc:	f000 f820 	bl	8002500 <_init>
 80024c0:	1b64      	subs	r4, r4, r5
 80024c2:	10a4      	asrs	r4, r4, #2
 80024c4:	2600      	movs	r6, #0
 80024c6:	42a6      	cmp	r6, r4
 80024c8:	d105      	bne.n	80024d6 <__libc_init_array+0x2e>
 80024ca:	bd70      	pop	{r4, r5, r6, pc}
 80024cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80024d0:	4798      	blx	r3
 80024d2:	3601      	adds	r6, #1
 80024d4:	e7ee      	b.n	80024b4 <__libc_init_array+0xc>
 80024d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80024da:	4798      	blx	r3
 80024dc:	3601      	adds	r6, #1
 80024de:	e7f2      	b.n	80024c6 <__libc_init_array+0x1e>
 80024e0:	08002550 	.word	0x08002550
 80024e4:	08002550 	.word	0x08002550
 80024e8:	08002550 	.word	0x08002550
 80024ec:	08002554 	.word	0x08002554

080024f0 <memset>:
 80024f0:	4402      	add	r2, r0
 80024f2:	4603      	mov	r3, r0
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d100      	bne.n	80024fa <memset+0xa>
 80024f8:	4770      	bx	lr
 80024fa:	f803 1b01 	strb.w	r1, [r3], #1
 80024fe:	e7f9      	b.n	80024f4 <memset+0x4>

08002500 <_init>:
 8002500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002502:	bf00      	nop
 8002504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002506:	bc08      	pop	{r3}
 8002508:	469e      	mov	lr, r3
 800250a:	4770      	bx	lr

0800250c <_fini>:
 800250c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800250e:	bf00      	nop
 8002510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002512:	bc08      	pop	{r3}
 8002514:	469e      	mov	lr, r3
 8002516:	4770      	bx	lr
